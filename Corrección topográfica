//Funciones Correccion Topografica
var topoCorrection = 'ERM';
//var topoCorrection = 'SCSc';


////////////////////////////////////////////////////////////////////////////////
// Function to calculate illumination condition (IC). Function by Patrick Burns 
// (pb463@nau.edu) and Matt Macander 
// (mmacander@abrinc.com)
function illuminationCondition(img){
  // Extract solar zenith and azimuth bands
  var SZ_rad = img.select('zenith').multiply(Math.PI).divide(180).float();
  var SA_rad = img.select('azimuth').multiply(Math.PI).divide(180).float();
  
  // Creat terrain layers
  var dem = ee.Image('USGS/SRTMGL1_003');
  var slp = ee.Terrain.slope(dem);
  var slp_rad = ee.Terrain.slope(dem).multiply(Math.PI).divide(180);
  var asp_rad = ee.Terrain.aspect(dem).multiply(Math.PI).divide(180);
  
  // Calculate the Illumination Condition (IC)
  // slope part of the illumination condition
  var cosZ = SZ_rad.cos();
  var cosS = slp_rad.cos();
  var slope_illumination = cosS.expression("cosZ * cosS", 
                                          {'cosZ': cosZ,
                                           'cosS': cosS.select('slope')});
  // aspect part of the illumination condition
  var sinZ = SZ_rad.sin(); 
  var sinS = slp_rad.sin();
  var cosAziDiff = (SA_rad.subtract(asp_rad)).cos();
  var aspect_illumination = sinZ.expression("sinZ * sinS * cosAziDiff", 
                                           {'sinZ': sinZ,
                                            'sinS': sinS,
                                            'cosAziDiff': cosAziDiff});
  // full illumination condition (IC)
  var ic = slope_illumination.add(aspect_illumination);

  // Add IC to original image
  return img.addBands(ic.rename('IC'))
    .addBands(cosZ.rename('cosZ'))
    .addBands(cosS.rename('cosS'))
    .addBands(slp.rename('slope'));
}

// Funcion para aplicar las corrreciones 
//SCSc 
//Soenen, S. A., Peddle, D. R., & Coburn, C. A. (2005).SCS+ C: A modified sun-canopy-sensor topographic correction in forested terrain. IEEE Transactions on geoscience and remote sensing, 43(9), 2148-2159.
//ERM (Empirical rotation model)
//Tan, B., Masek, J. G., Wolfe, R., Gao, F., Huang, C., Vermote, E. F., ... & Ederer, G. (2013). Improved forest change detection with terrain illumination corrected Landsat images. Remote Sensing of Environment, 136, 469-483.

function illuminationCorrection(img){
  var studyArea = img.geometry()
  var bandList = ['blue', 'green', 'red', 'nir', 'swir1', 'swir2']
  var props = img.toDictionary();
  var st = img.get('system:time_start');
  var img_plus_ic = img;
  var mask2 = img_plus_ic.select('slope').gte(5)
    .and(img_plus_ic.select('IC').gte(0))
    .and(img_plus_ic.select('nir').gt(-0.1));
  var img_plus_ic_mask2 = ee.Image(img_plus_ic.updateMask(mask2));
  
  // Especificar bandas que seran corregidas topogaficamente  
  var compositeBands = img.bandNames();
  var nonCorrectBands = img.select(compositeBands.removeAll(bandList));
  
  function apply_topoCorr(bandList){
    var method = 'SCSc';
    var out = img_plus_ic_mask2.select('IC', bandList).reduceRegion({
      reducer: ee.Reducer.linearFit(),
      geometry: studyArea,
      scale: 30,
      maxPixels: 1e13
    }); 
    var out_a = ee.Number(out.get('scale'));
    var out_b = ee.Number(out.get('offset'));
    var out_c = out_b.divide(out_a);
    
    
   if  (topoCorrection == 'ERM') {
     
     //Apply Tan et al., (2010) empirical rotation model
    var erm_tanEtAl = img_plus_ic_mask2.expression(
    'image - (a * (ic - cosz))',{
      'image': img_plus_ic_mask2.select(bandList),
      'cosz':  img_plus_ic_mask2.select('cosZ'),
      'ic': img_plus_ic_mask2.select('IC'),
      'a': out_a,
  })
  print('Correcion ERM')   
  return erm_tanEtAl
  
   } 
   else {
      
   // Apply the SCSc correction
    var SCSc_output = img_plus_ic_mask2.expression(
      "((image * (cosB * cosZ + cvalue)) / (ic + cvalue))", {
      'image': img_plus_ic_mask2.select(bandList),
      'ic': img_plus_ic_mask2.select('IC'),
      'cosB': img_plus_ic_mask2.select('cosS'),
      'cosZ': img_plus_ic_mask2.select('cosZ'),
      'cvalue': out_c
    }) 
  print('Correcion SCSc') 
  return SCSc_output
  
   }
  }
  
  var img_topoCorr = ee.Image(bandList.map(apply_topoCorr)).uint16()
    .addBands(img_plus_ic.select('IC'));
  var bandList_IC = ee.List([bandList, 'IC']).flatten();
  img_topoCorr = img_topoCorr.unmask(img_plus_ic.select(bandList_IC)).select(bandList);
  
  return img_topoCorr.addBands(nonCorrectBands)
    .setMulti(props)
    .set('system:time_start',st);
}

var topoImage = ee.Image(illuminationCorrection(illuminationCondition(image)))
print(topoImage)


var visSWNIRRED = {bands: ['nir','swir1','red'], min: [1500,0,0], max: [6500, 5500, 5500]};
Map.addLayer(image, visSWNIRRED, 'Mosaico Meiode');
Map.addLayer(topoImage, visSWNIRRED, 'Mosaico Meiode Topo');

var studyArea = image.geometry();

//Export to asset
Export.image.toAsset(
  {image:topoImage.select(['blue', 'green', 'red', 'nir', 'swir1', 'swir2','zenith','azimuth','IC']), 
  description: 'Medoid_Honduras_2018_topo', 
  region:studyArea.bounds(), 
  scale:30,
  maxPixels: 1e12})
